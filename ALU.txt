CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Not16(in=x , out=nox );
    Inc16(in=nox , out=noxf );
    Add16(a =x , b =noxf , out =x0 );
    Mux16(a=x , b=x0 , sel=zx , out=ox1 );
    Not16(in=ox1 , out=oxo );
    Mux16(a=ox1 , b=oxo , sel=nx , out=ox );

    Not16(in=y , out=noy );
    Inc16(in=noy , out=noyf );
    Add16(a =y , b =noyf , out =y0 );
    Mux16(a=y , b=y0 , sel=zy , out=oy1 );
    Not16(in=oy1 , out=oyo );
    Mux16(a=oy1 , b=oyo , sel=ny , out=oy );

    Add16(a =ox , b =oy , out =adxy );
    And16(a=ox , b=oy , out=andxy );
    Mux16(a=andxy , b=adxy , sel=f , out=of );

    Not16(in=of , out=nof );
    Mux16(a=of , b=nof , sel=no , out=out,out[0..7]=out1,out[8..15]=out2, out[15]=ong);
    
    Or8Way(in=out1 , out=o1 );
    Or8Way(in=out2 , out=o2 );
    Or(a=o1 , b=o2 , out=ozr );
    Mux(a=true , b=false , sel=ozr , out=zr );
    Mux(a=false , b=true , sel=ong , out=ng );
}